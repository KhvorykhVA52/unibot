ADMIN_IDS = ["1592890429","1116477607", "6499953001", "564380150","1025247272", "843344460" ]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤]
import telebot
import json
from telebot import types
from config import TOKEN

bot = telebot.TeleBot(TOKEN)

def load_data():
    with open("data.json", "r", encoding="utf-8") as file:
        return json.load(file)

def calculate_risk(student_data):
    debts = student_data.get("debts", 0)
    risk = min(100, debts * 25)  
    return risk

@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.chat.id)
    data = load_data()

    if user_id in data["students"]:
        bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n–ù–∞–ø–∏—à–∏ /status, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å.")
    else:
        bot.send_message(message.chat.id, f"üë§ –¢–≤–æ–π ID: {user_id}")
        msg = bot.send_message(message.chat.id, "üìù –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –§–ò–û, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:")
        bot.register_next_step_handler(msg, register_student)

@bot.message_handler(commands=['menu'])
def menu(message):
    markup = types.InlineKeyboardMarkup(row_width=2)

    btn1 = types.InlineKeyboardButton("üìä –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å", callback_data="status")
    btn2 = types.InlineKeyboardButton("üìò –û—Ü–µ–Ω–∫–∏", callback_data="grades")
    btn3 = types.InlineKeyboardButton("‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_grade")
    btn4 = types.InlineKeyboardButton("‚ùó –î–æ–ª–≥–∏", callback_data="set_debts")
    btn5 = types.InlineKeyboardButton("üìÑ –ö–∞—Ä—Ç–æ—á–∫–∞", callback_data="card")

    markup.add(btn1, btn2, btn3, btn4, btn5)

    bot.send_message(message.chat.id, "üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


       
@bot.message_handler(commands=['menu_inline'])
def menu_inline(message):
    markup = types.InlineKeyboardMarkup(row_width=2)

    btn1 = types.InlineKeyboardButton("üìä –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å", callback_data="status")
    btn2 = types.InlineKeyboardButton("üìò –û—Ü–µ–Ω–∫–∏", callback_data="grades")
    btn3 = types.InlineKeyboardButton("‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_grade")
    btn4 = types.InlineKeyboardButton("‚ùó –î–æ–ª–≥–∏", callback_data="set_debts")
    btn5 = types.InlineKeyboardButton("üìÑ –ö–∞—Ä—Ç–æ—á–∫–∞", callback_data="card")

    markup.add(btn1, btn2, btn3, btn4, btn5)

    bot.send_message(message.chat.id, "üì≤ –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(commands=['admin'])
def admin_panel(message):
    user_id = str(message.chat.id)

    if user_id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    data = load_data()
    students = data["students"]

    if not students:
        bot.send_message(message.chat.id, "–ë–∞–∑–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç–∞.")
        return

    report = "üìã –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n"

    for uid, student in students.items():
        name = student.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        grades = student.get("grades", {})
        debts = student.get("debts", 0)
        risk = calculate_risk(student)

        if grades:
            avg = round(sum(grades.values()) / len(grades), 2)
        else:
            avg = 0.0

        report += f"""üë§ {name}
ID: {uid}
üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg}
‚ùó –î–æ–ª–≥–∏: {debts} | üî• –†–∏—Å–∫: {risk}%

"""

    bot.send_message(message.chat.id, report)


@bot.message_handler(commands=['status'])
def status(message):
    data = load_data()
    user_id = str(message.chat.id)

    if user_id in data["students"]:
        student = data["students"][user_id]
        name = student["name"]
        grades = student["grades"]
        debts = student["debts"]
        risk = calculate_risk(student)

        grades_text = "\n".join([f"{subj}: {score} –±–∞–ª–ª–æ–≤" for subj, score in grades.items()])
        text = f"""üë§ {name}
üìö –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å:
{grades_text}

‚ùó –î–æ–ª–≥–∏: {debts}
üî• –†–∏—Å–∫ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è: {risk}%
"""
    else:
        text = "–¢—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."


    bot.send_message(message.chat.id, text)
 # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ü–µ–Ω–∫–∏
@bot.message_handler(commands=['grades'])
def grades(message):
    data = load_data()
    user_id = str(message.chat.id)

    if user_id in data["students"]:
        grades = data["students"][user_id]["grades"]
        text = "\n".join([f"{subject}: {score} –±–∞–ª–ª–æ–≤" for subject, score in grades.items()])
    else:
        text = "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ."
    
    bot.send_message(message.chat.id, f"üìò –¢–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏:\n{text}")

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–ª—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
@bot.message_handler(commands=['add_grade'])
def add_grade(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –ø—Ä–µ–¥–º–µ—Ç –∏ –±–∞–ª–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n–§–∏–∑–∏–∫–∞, 70")
    bot.register_next_step_handler(msg, save_grade)

def save_grade(message):
    try:
        subject, score = message.text.split(",")
        subject = subject.strip()
        score = int(score.strip())

        data = load_data()
        user_id = str(message.chat.id)

        if user_id in data["students"]:
            data["students"][user_id]["grades"][subject] = score
            with open("data.json", "w", encoding="utf-8") as file:
                json.dump(data, file, indent=2, ensure_ascii=False)
            bot.send_message(message.chat.id, f"‚úÖ –û—Ü–µ–Ω–∫–∞ –ø–æ '{subject}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {score} –±–∞–ª–ª–æ–≤")
        else:
            bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –ü–∏—à–∏ —Ç–∞–∫: –ü—Ä–µ–¥–º–µ—Ç, –ë–∞–ª–ª—ã")

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–≥–æ–≤
@bot.message_handler(commands=['set_debts'])
def set_debts(message):
    msg = bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –¥–æ–ª–≥–æ–≤? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ:")
    bot.register_next_step_handler(msg, save_debts)

def save_debts(message):
    try:
        debts = int(message.text.strip())
        data = load_data()
        user_id = str(message.chat.id)

        if user_id in data["students"]:
            data["students"][user_id]["debts"] = debts
            with open("data.json", "w", encoding="utf-8") as file:
                json.dump(data, file, indent=2, ensure_ascii=False)
            bot.send_message(message.chat.id, f"‚ùó –û–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å —É —Ç–µ–±—è {debts} –¥–æ–ª–≥–æ–≤.")
        else:
            bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
@bot.message_handler(commands=['card'])
def card(message):
    data = load_data()
    user_id = str(message.chat.id)

    if user_id in data["students"]:
        student = data["students"][user_id]
        name = student["name"]
        grades = student["grades"]
        debts = student["debts"]
        risk = calculate_risk(student)

        # –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
        if grades:
            avg = round(sum(grades.values()) / len(grades), 2)
        else:
            avg = 0.0

        grades_text = "\n".join([f"{subj}: {score} –±–∞–ª–ª–æ–≤" for subj, score in grades.items()]) or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        text = f"""üéì –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞

üë§ –§–ò–û: {name}
üÜî ID: {user_id}

üìö –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å:
{grades_text}

üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg}
‚ùó –î–æ–ª–≥–æ–≤: {debts}
üî• –†–∏—Å–∫ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è: {risk}%
"""
    else:
        text = "–¢—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."

    bot.send_message(message.chat.id, text)        
def register_student(message):
    name = message.text.strip()
    user_id = str(message.chat.id)

    new_student = {
        "name": name,
        "grades": {},
        "debts": 0
    }

    data = load_data()
    data["students"][user_id] = new_student

    with open("data.json", "w", encoding="utf-8") as file:
        json.dump(data, file, indent=2, ensure_ascii=False)

    bot.send_message(message.chat.id, f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n/status ‚Äî —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å\n/add_grade ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É\n/set_debts ‚Äî —É–∫–∞–∑–∞—Ç—å –¥–æ–ª–≥–∏")

@bot.callback_query_handler(func=lambda call: True)
def handle_inline_buttons(call):
    if call.data == "status":
        status(call.message)
    elif call.data == "grades":
        grades(call.message)
    elif call.data == "add_grade":
        add_grade(call.message)
    elif call.data == "set_debts":
        set_debts(call.message)
    elif call.data == "card":
        card(call.message)

bot.polling()
