import telebot
from telebot import types
from config import TOKEN
from database import *
import sqlite3

init_db()

faculties = {
    "–í–®–¶–¢": {
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏ —Å–µ—Ç–µ–π": ["–ò–ë–ö–°–± 24-1", "–ò–ë–ö–°–± 23-1"],
        "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è": ["–ê–°–û–∏–£–ë-24-1", "–ê–°–û–∏–£–ë-23-1"]
    },
    "–ù–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤—ã–µ –¥–µ–ª–æ": {
        "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤ –≤ –Ω–µ—Ñ—Ç—è–Ω–æ–π –∏ –≥–∞–∑–æ–≤–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏": ["–ê–¢–ü-21", "–≠–≠-22"],
        "–ù–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤–æ–µ –¥–µ–ª–æ": ["–ù–î–ë-24", "–ù–î–ë-23"]
    },
    "–ò–¢": {
        "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤": ["–ú–ú–°–ü-24", "–ú–ú–°–ü-23"],
    },
    "–ò–ü–¢–ò": {
        " –ü—Ä–∏–±–æ—Ä—ã, –º–µ—Ç–æ–¥—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"  : ["–ü–ö–ö–î-24", "–ü–ö–ö–î-23"],
    },
    "–°–¢–†–û–ò–ù" : {
        "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –∏ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ": ["–ü–ì–°-24", "–ü–ì–°-23"],
    },
}

ADMIN_IDS = [
    "1592890429", "1116477607", "6499953001",
    "564380150", "1025247272", "843344460"
]

bot = telebot.TeleBot(TOKEN)

@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.chat.id)

    if student_exists(user_id):
        bot.send_message(message.chat.id, "‚úÖ –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n–ù–∞–ø–∏—à–∏ /menu —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for fac in faculties.keys():
        markup.add(types.KeyboardButton(fac))

    msg = bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Çüëã, –í—ã–±–µ—Ä–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=markup)
    bot.register_next_step_handler(msg, select_faculty)

def select_faculty(message):
    faculty = message.text.strip()
    if faculty not in faculties:
        bot.send_message(message.chat.id, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: /start")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for spec in faculties[faculty].keys():
        markup.add(types.KeyboardButton(spec))

    msg = bot.send_message(message.chat.id, "üìò –í—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:", reply_markup=markup)
    bot.register_next_step_handler(msg, select_specialty, faculty)

def select_specialty(message, faculty):
    specialty = message.text.strip()
    if specialty not in faculties[faculty]:
        bot.send_message(message.chat.id, "‚ùó –ù–µ–≤–µ—Ä–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: /start")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for group in faculties[faculty][specialty]:
        markup.add(types.KeyboardButton(group))

    msg = bot.send_message(message.chat.id, "üßë‚Äçüéì –í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:", reply_markup=markup)
    bot.register_next_step_handler(msg, select_group, faculty, specialty)

def select_group(message, faculty, specialty):
    group_name = message.text.strip()
    if group_name not in faculties[faculty][specialty]:
        bot.send_message(message.chat.id, "‚ùó –ù–µ–≤–µ—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: /start")
        return

    msg = bot.send_message(message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û:")
    bot.register_next_step_handler(msg, finish_registration, faculty, specialty, group_name)

def finish_registration(message, faculty, specialty, group_name):
    user_id = str(message.chat.id)
    name = message.text.strip()
    add_student(user_id, name, faculty, specialty, group_name)
    bot.send_message(message.chat.id, f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!\n–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /menu –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")


@bot.message_handler(commands=['status'])
def status(message):
    user_id = str(message.chat.id)
    student = get_student(user_id)

    if not student:
        bot.send_message(message.chat.id, "‚ùó –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return

    name = student["name"]
    grades = student["grades"]
    debts = student["debts"]
    avg = round(sum(grades.values()) / len(grades), 2) if grades else 0.0
    risk = min(100, debts * 25)
    grades_text = "\n".join([f"{subj}: {score} –±–∞–ª–ª–æ–≤" for subj, score in grades.items()]) or "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"

    text = f"""üë§ {name}
üèõ –§–∞–∫—É–ª—å—Ç–µ—Ç: {student["faculty"]}
üìò –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {student["specialty"]}
üßë‚Äçüéì –ì—Ä—É–ø–ø–∞: {student["group"]}

üìö –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å:
{grades_text}

üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg}
‚ùó –î–æ–ª–≥–∏: {debts}
üî• –†–∏—Å–∫ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è: {risk}%
"""
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['grades'])
def grades(message):
    user_id = str(message.chat.id)
    student = get_student(user_id)

    if not student:
        bot.send_message(message.chat.id, "‚ùó –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    grades = student["grades"]
    if grades:
        grades_text = "\n".join([f"{subj}: {score} –±–∞–ª–ª–æ–≤" for subj, score in grades.items()])
    else:
        grades_text = "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"

    bot.send_message(message.chat.id, f"üìò –¢–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏:\n{grades_text}")

@bot.message_handler(commands=['add_grade'])
def add_grade(message):
    msg = bot.send_message(message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏ –ø—Ä–µ–¥–º–µ—Ç –∏ –±–∞–ª–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    bot.register_next_step_handler(msg, save_grade)

def save_grade(message):
    try:
        user_id = str(message.chat.id)
        student = get_student(user_id)
        if not student:
            bot.send_message(message.chat.id, "‚ùó –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return

        subject, score = message.text.split(",")
        grades = student["grades"]
        grades[subject.strip()] = int(score.strip())
        update_grades(user_id, grades)
        bot.send_message(message.chat.id, f"‚úÖ –û—Ü–µ–Ω–∫–∞ –ø–æ '{subject.strip()}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞! –§–æ—Ä–º–∞—Ç: –ü—Ä–µ–¥–º–µ—Ç, –ë–∞–ª–ª—ã")

@bot.message_handler(commands=['set_debts'])
def set_debts(message):
    msg = bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –¥–æ–ª–≥–æ–≤? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ:")
    bot.register_next_step_handler(msg, save_debts)

def save_debts(message):
    try:
        user_id = str(message.chat.id)
        student = get_student(user_id)
        if not student:
            bot.send_message(message.chat.id, "‚ùó –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return

        debts = int(message.text.strip())
        update_debts(user_id, debts)
        bot.send_message(message.chat.id, f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å —É —Ç–µ–±—è {debts} –¥–æ–ª–≥–æ–≤.")
    except:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")

@bot.message_handler(commands=['card'])
def card(message):
    user_id = str(message.chat.id)
    student = get_student(user_id)

    if not student:
        bot.send_message(message.chat.id, "‚ùó –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    name = student["name"]
    grades = student["grades"]
    debts = student["debts"]
    avg = round(sum(grades.values()) / len(grades), 2) if grades else 0.0
    risk = min(100, debts * 25)
    grades_text = "\n".join([f"{subj}: {score} –±–∞–ª–ª–æ–≤" for subj, score in grades.items()]) or "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"

    text = f"""üéì –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞

üë§ –§–ò–û: {name}
üÜî ID: {user_id}

üìö –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å:
{grades_text}

üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg}
‚ùó –î–æ–ª–≥–∏: {debts}
üî• –†–∏—Å–∫ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è: {risk}%
"""
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    user_id = str(message.chat.id)

    if user_id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    report = "üìã –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n"
    students = get_all_students()

    for student in students:
        name = student["name"]
        uid = student["id"]
        grades = student["grades"]
        debts = student["debts"]
        avg = round(sum(grades.values()) / len(grades), 2) if grades else 0.0
        risk = min(100, debts * 25)

        report += f"""üë§ {name}
ID: {uid}
üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg}
‚ùó –î–æ–ª–≥–∏: {debts} | üî• –†–∏—Å–∫: {risk}%\n\n"""

    bot.send_message(message.chat.id, report)

@bot.message_handler(commands=['menu'])
def menu(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üìä –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å", callback_data="status"),
        types.InlineKeyboardButton("üìò –û—Ü–µ–Ω–∫–∏", callback_data="grades"),
        types.InlineKeyboardButton("‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_grade"),
        types.InlineKeyboardButton("‚ùó –î–æ–ª–≥–∏", callback_data="set_debts"),
        types.InlineKeyboardButton("üìÑ –ö–∞—Ä—Ç–æ—á–∫–∞", callback_data="card")
    )
    bot.send_message(message.chat.id, "üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_inline_buttons(call):
    if call.data == "status":
        status(call.message)
    elif call.data == "grades":
        grades(call.message)
    elif call.data == "add_grade":
        add_grade(call.message)
    elif call.data == "set_debts":
        set_debts(call.message)
    elif call.data == "card":
        card(call.message)

@bot.message_handler(commands=['delete_me'])
def delete_me(message):
    import sqlite3
    user_id = str(message.chat.id)
    conn = sqlite3.connect("students.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM students WHERE id = ?", (user_id,))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, "üóë –¢—ã —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.")
bot.polling()
