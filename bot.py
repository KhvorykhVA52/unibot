import telebot
import math
import requests
from telebot import types
from config import TOKEN
from database import *
import sqlite3
import threading
import time

init_db()

faculties = {
    "–í–®–¶–¢": {
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏ —Å–µ—Ç–µ–π": ["–ò–ë–ö–°-24-1", "–ò–ë–ö–°-23"],
        "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è": ["–ê–°–û–∏–£–ë-24-1", "–ê–°–û–∏–£–ë-23"]
    },
    "–ù–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤—ã–µ –¥–µ–ª–æ": {
        "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤ –≤ –Ω–µ—Ñ—Ç—è–Ω–æ–π –∏ –≥–∞–∑–æ–≤–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏": ["–ê–¢–ü-21", "–≠–≠-22"],
        "–ù–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤–æ–µ –¥–µ–ª–æ": ["–ù–î–ë-24", "–ù–î–ë-23"]
    }
}

ADMIN_IDS = [
    "1592890429", "1116477607", "6499953001",
    "564380150", "1025247272", "843344460"
]

bot = telebot.TeleBot(TOKEN)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def add_back_button(markup, back_to):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_to))

def send_with_back(message, text, back_to):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥"""
    markup = types.InlineKeyboardMarkup()
    add_back_button(markup, back_to)
    bot.send_message(message.chat.id, text, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.chat.id)

    if student_exists(user_id):
        bot.send_message(message.chat.id, "‚úÖ –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n–ù–∞–ø–∏—à–∏ /menu —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for fac in faculties.keys():
        markup.add(types.KeyboardButton(fac))

    msg = bot.send_message(message.chat.id, "üèõ –í—ã–±–µ—Ä–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=markup)
    bot.register_next_step_handler(msg, select_faculty)

def select_faculty(message):
    faculty = message.text.strip()
    if faculty not in faculties:
        bot.send_message(message.chat.id, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: /start")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for spec in faculties[faculty].keys():
        markup.add(types.KeyboardButton(spec))

    msg = bot.send_message(message.chat.id, "üìò –í—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:", reply_markup=markup)
    bot.register_next_step_handler(msg, select_specialty, faculty)

def select_specialty(message, faculty):
    specialty = message.text.strip()
    if specialty not in faculties[faculty]:
        bot.send_message(message.chat.id, "‚ùó –ù–µ–≤–µ—Ä–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: /start")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for group in faculties[faculty][specialty]:
        markup.add(types.KeyboardButton(group))

    msg = bot.send_message(message.chat.id, "üßë‚Äçüéì –í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:", reply_markup=markup)
    bot.register_next_step_handler(msg, select_group, faculty, specialty)

def select_group(message, faculty, specialty):
    group_name = message.text.strip()
    if group_name not in faculties[faculty][specialty]:
        bot.send_message(message.chat.id, "‚ùó –ù–µ–≤–µ—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: /start")
        return

    student_names = get_students_by_group(faculty, specialty, group_name)
    if not student_names:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for name in student_names:
        markup.add(types.KeyboardButton(name))

    msg = bot.send_message(message.chat.id, "üë§ –í—ã–±–µ—Ä–∏ —Å–≤–æ—ë –§–ò–û –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, assign_identity, faculty, specialty, group_name)

def assign_identity(message, faculty, specialty, group_name):
    user_id = str(message.chat.id)
    name = message.text.strip()
    assign_user_id_to_student(user_id, name, faculty, specialty, group_name)

    bot.send_message(message.chat.id, f"""‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!
–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.""")

    commands_text = """
üìå –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:

/menu ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/status ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å
/grades ‚Äî —Å–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫
/add_grade ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É
/set_debts ‚Äî —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–≥–æ–≤
/card ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
/admin ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
/university ‚Äî FAQ –ø–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—É
/achievements ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è  
/logout - –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞

"""
    bot.send_message(message.chat.id, commands_text)

@bot.message_handler(commands=['menu'])
def show_main_menu(chat_id_or_message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if isinstance(chat_id_or_message, types.CallbackQuery):
        chat_id = chat_id_or_message.message.chat.id
        try:
            bot.delete_message(chat_id, chat_id_or_message.message.message_id)
        except:
            pass
    else:
        chat_id = chat_id_or_message.chat.id if hasattr(chat_id_or_message, 'chat') else chat_id_or_message

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üìä –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å", callback_data="status"),
        types.InlineKeyboardButton("üìò –û—Ü–µ–Ω–∫–∏", callback_data="grades"),
        types.InlineKeyboardButton("‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_grade"),
        types.InlineKeyboardButton("‚ùó –î–æ–ª–≥–∏", callback_data="set_debts"),
        types.InlineKeyboardButton("üìÑ –ö–∞—Ä—Ç–æ—á–∫–∞", callback_data="card"),
        types.InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminders"),
        types.InlineKeyboardButton("üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="motivation"),  
        types.InlineKeyboardButton("üèõ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç FAQ", callback_data="university")
    )
    bot.send_message(chat_id, "üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "menu")
def back_to_menu(call):
    show_main_menu(call)

@bot.message_handler(commands=['status'])
def status(message):
    user_id = str(message.chat.id)
    student = get_student(user_id)

    if not student:
        bot.send_message(message.chat.id, "‚ùó –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return

    name = student["name"]
    grades = student["grades"]
    debts = student["debts"]
    avg = round(sum(grades.values()) / len(grades), 2) if grades else 0.0
    risk = min(100, debts * 25)
    grades_text = "\n".join([f"{subj}: {score} –±–∞–ª–ª–æ–≤" for subj, score in grades.items()]) or "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"

    if avg >= 90:
        prediction = "–û—Ç–ª–∏—á–Ω–æ (5)"
    elif avg >= 75:
        prediction = "–•–æ—Ä–æ—à–æ (4)"
    elif avg >= 60:
        prediction = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ (3)"
    else:
        prediction = "–ù–µ—É–¥ (2) ‚Äî —Ä–∏—Å–∫ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è –≤—ã—Å–æ–∫"

    critical_subjects = [f"‚ùó {subj}: {score} –±–∞–ª–ª–æ–≤" for subj, score in grades.items() if score < 60]
    critical_text = "\n".join(critical_subjects) or "–ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"

    goal = 85
    filled = math.floor(avg / goal * 5)
    bar = "‚ñ∞" * filled + "‚ñ±" * (5 - filled)
    progress_line = f"üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏: {bar} {avg} / {goal}"

    text = f"""üë§ {name}
üèõ –§–∞–∫—É–ª—å—Ç–µ—Ç: {student["faculty"]}
üìò –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {student["specialty"]}
üßë‚Äçüéì –ì—Ä—É–ø–ø–∞: {student["group"]}

üìä –ú–æ—è –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å
   ‚îú‚îÄ –¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã
{grades_text}
   ‚îú‚îÄ –ü—Ä–æ–≥–Ω–æ–∑ –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏: {prediction}
   ‚îú‚îÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã:
{critical_text}
   ‚îî‚îÄ {progress_line}

üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg}
‚ùó –î–æ–ª–≥–∏: {debts}
üî• –†–∏—Å–∫ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è: {risk}%
"""
    send_with_back(message, text, "menu")

@bot.message_handler(commands=['grades'])
def grades(message):
    user_id = str(message.chat.id)
    student = get_student(user_id)

    if not student:
        bot.send_message(message.chat.id, "‚ùó –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    grades = student["grades"]
    if grades:
        grades_text = "\n".join([f"{subj}: {score} –±–∞–ª–ª–æ–≤" for subj, score in grades.items()])
    else:
        grades_text = "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"

    send_with_back(message, f"üìò –¢–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏:\n{grades_text}", "menu")

@bot.message_handler(commands=['add_grade'])
def add_grade(message):
    msg = bot.send_message(message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏ –ø—Ä–µ–¥–º–µ—Ç –∏ –±–∞–ª–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n–ù–∞–ø—Ä–∏–º–µ—Ä: –§–∏–∑–∏–∫–∞, 85")
    bot.register_next_step_handler(msg, save_grade)

def save_grade(message):
    try:
        user_id = str(message.chat.id)
        student = get_student(user_id)

        if not student:
            bot.send_message(message.chat.id, "‚ùó –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return

        text = message.text.strip()
        items = text.split(".")
        updates = {}

        for item in items:
            if "," not in item:
                continue
            subject, score = item.split(",", 1)
            subject = subject.strip()
            score = int(score.strip())
            updates[subject] = score

        if not updates:
            raise ValueError("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")

        grades = student["grades"]
        grades.update(updates)
        update_grades(user_id, grades)

        result = "\n".join([f"{subj}: {score} –±–∞–ª–ª–æ–≤" for subj, score in updates.items()])
        send_with_back(message, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã –æ—Ü–µ–Ω–∫–∏:\n{result}", "menu")

    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞! –§–æ—Ä–º–∞—Ç: –§–∏–∑–∏–∫–∞, 78. –ê–ª–≥–µ–±—Ä–∞, 99.")
        print(f"[DEBUG] –û—à–∏–±–∫–∞ –≤ save_grade: {e}")

@bot.message_handler(commands=['set_debts'])
def set_debts(message):
    msg = bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –¥–æ–ª–≥–æ–≤? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ:")
    bot.register_next_step_handler(msg, save_debts)

def save_debts(message):
    try:
        user_id = str(message.chat.id)
        student = get_student(user_id)
        if not student:
            bot.send_message(message.chat.id, "‚ùó –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return

        debts = int(message.text.strip())
        update_debts(user_id, debts)
        send_with_back(message, f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å —É —Ç–µ–±—è {debts} –¥–æ–ª–≥–æ–≤.", "menu")
    except:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")

@bot.message_handler(commands=['card'])
def card(message):
    user_id = str(message.chat.id)
    student = get_student(user_id)

    if not student:
        bot.send_message(message.chat.id, "‚ùó –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    name = student["name"]
    grades = student["grades"]
    debts = student["debts"]
    avg = round(sum(grades.values()) / len(grades), 2) if grades else 0.0
    risk = min(100, debts * 25)
    grades_text = "\n".join([f"{subj}: {score} –±–∞–ª–ª–æ–≤" for subj, score in grades.items()]) or "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"

    text = f"""üéì –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞

üë§ –§–ò–û: {name}
üÜî ID: {user_id}

üìö –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å:
{grades_text}

üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg}
‚ùó –î–æ–ª–≥–∏: {debts}
üî• –†–∏—Å–∫ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è: {risk}%
"""
    send_with_back(message, text, "menu")

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    user_id = str(message.chat.id)

    if user_id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    report = "üìã –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n"
    students = get_all_students()

    for student in students:
        name = student["name"]
        uid = student["id"]
        grades = student["grades"]
        debts = student["debts"]
        avg = round(sum(grades.values()) / len(grades), 2) if grades else 0.0
        risk = min(100, debts * 25)

        report += f"""üë§ {name}
ID: {uid}
üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg}
‚ùó –î–æ–ª–≥–∏: {debts} | üî• –†–∏—Å–∫: {risk}%\n\n"""

    send_with_back(message, report, "menu")

@bot.message_handler(commands=['university'])
def university_info(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    buttons = [
        types.InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", callback_data="uni_contacts"),
        types.InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤", callback_data="uni_schedule"),
        types.InlineKeyboardButton("–ê–¥—Ä–µ—Å–∞ –∫–æ—Ä–ø—É—Å–æ–≤", callback_data="uni_map"),
        types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ—Å–¥–∞—á", callback_data="uni_retakes"),
        types.InlineKeyboardButton("–®–∞–±–ª–æ–Ω—ã –∑–∞—è–≤–ª–µ–Ω–∏–π", callback_data="uni_templates")
    ]
    markup.add(*buttons)
    add_back_button(markup, "menu")
    
    bot.send_message(
        message.chat.id,
        "üèõ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç FAQ - –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: call.data == "reminders")
def handle_reminders(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="add_reminder"),
        types.InlineKeyboardButton("üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="list_reminders")
    )
    add_back_button(markup, "menu")
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:",
        reply_markup=markup
    )

def handle_university_buttons(call):
    try:
        if call.data == "uni_contacts":
            text = "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n\n1. –ü–∞–Ω—á–µ–Ω–∫–æ –ù–∞—Ç–∞–ª—å—è –ë–æ—Ä–∏—Å–æ–≤–Ω–∞: +7-922-486-62-05\n2. –ó–∞–∏—á–∫–æ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ –í–∞—Å–∏–ª—å–µ–≤–Ω–∞: +7-904-492-50-50"
            markup = types.InlineKeyboardMarkup()
            add_back_button(markup, "university")
            bot.send_message(call.message.chat.id, text, reply_markup=markup)

        elif call.data == "uni_schedule":
            text = (
                "üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:\n\n"
                "1 –ø–∞—Ä–∞: 08:00 - 09:35\n"
                "2 –ø–∞—Ä–∞: 09:45 - 11:20\n"
                "3 –ø–∞—Ä–∞: 11:30 - 13:05\n"
                "4 –ø–∞—Ä–∞: 13:45 - 15:20\n"
                "5 –ø–∞—Ä–∞: 15:30 - 17:05\n"
                "6 –ø–∞—Ä–∞: 17:15 - 18:50\n"
                "7 –ø–∞—Ä–∞: 19:00 - 20:25\n"
                "8 –ø–∞—Ä–∞: 20:35 - 22:00"
            )
            markup = types.InlineKeyboardMarkup()
            add_back_button(markup, "university")
            bot.send_message(call.message.chat.id, text, reply_markup=markup)

        elif call.data == "uni_map":
            buildings = get_all_buildings()
            if buildings:
                markup = types.InlineKeyboardMarkup(row_width=1)
                for i, (name, _) in enumerate(buildings):
                    markup.add(types.InlineKeyboardButton(name, callback_data=f"bld_{i}"))
                add_back_button(markup, "university")
                bot.send_message(call.message.chat.id, "üèõ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å:", reply_markup=markup)
            else:
                markup = types.InlineKeyboardMarkup()
                add_back_button(markup, "university")
                bot.send_message(call.message.chat.id, "‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–æ—Ä–ø—É—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω.", reply_markup=markup)

        elif call.data == "uni_retakes":
            text = (
                "üìù –ü—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ—Å–¥–∞—á:\n\n"
                "1. –ü–µ—Ä–µ—Å–¥–∞—á–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è 1 —Ä–∞–∑ –∑–∞ —Å–µ–º–µ—Å—Ç—Ä\n"
                "2. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –æ –¥–∞—Ç–µ, –≤—Ä–µ–º–µ–Ω–∏, –º–µ—Å—Ç–µ\n"
                "3. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–¥–∞—á–µ ‚Äî 5"
            )
            markup = types.InlineKeyboardMarkup()
            add_back_button(markup, "university")
            bot.send_message(call.message.chat.id, text, reply_markup=markup)

        elif call.data == "uni_templates":
            try:
                with open('zayavlenie.docx', 'rb') as doc:
                    bot.send_document(call.message.chat.id, doc, caption="üìÑ –í–æ—Ç –¥–µ—Ä–∂–∏!")
                markup = types.InlineKeyboardMarkup()
                add_back_button(markup, "university")
                bot.send_message(call.message.chat.id, "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞–∑–¥–µ–ª FAQ:", reply_markup=markup)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
                markup = types.InlineKeyboardMarkup()
                add_back_button(markup, "university")
                bot.send_message(call.message.chat.id, "‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=markup)

        elif call.data.startswith("bld_"):
            index = int(call.data.split("_")[1])
            buildings = get_all_buildings()
            if 0 <= index < len(buildings):
                name, address = buildings[index]
                text = f"üèõ <b>{name}</b>\nüìç {address}"
                markup = types.InlineKeyboardMarkup()
                add_back_button(markup, "uni_map")
                bot.send_message(call.message.chat.id, text, parse_mode="HTML", reply_markup=markup)
            else:
                markup = types.InlineKeyboardMarkup()
                add_back_button(markup, "uni_map")
                bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ö–æ—Ä–ø—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=markup)

    except Exception as e:
        print(f"[ERROR] –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ university_buttons: {e}")
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@bot.message_handler(commands=['quote'])
def send_quote(message):
    try:
        url = "https://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=ru"
        response = requests.get(url, timeout=5)
        data = response.json()

        quote = data.get("quoteText", "–¶–∏—Ç–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.").strip()
        author = data.get("quoteAuthor", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä").strip()

        bot.send_message(message.chat.id, f"üí¨ <b>{quote}</b>\n‚Äî <i>{author}</i>", parse_mode="HTML")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã.")
        print(f"[ERROR] –¶–∏—Ç–∞—Ç–∞: {e}")

# --- –¶–ò–¢–ê–¢–ê ---
def send_quote(message):
    try:
        response = requests.get("https://api.quotable.io/random", timeout=10, verify=False)
        if response.status_code == 200:
            data = response.json()
            quote = data['content']
            author = data['author']
            text = f"üí¨ {quote}\n‚Äî {author}"
        else:
            text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        send_with_back(message, text, "motivation")
    except Exception as e:
        print(f"[ERROR] –¶–∏—Ç–∞—Ç–∞: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã.")

def start_pomodoro(message):
    try:
        bot.send_message(message.chat.id, "‚è± Pomodoro –∑–∞–ø—É—â–µ–Ω: 25 –º–∏–Ω—É—Ç —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏!\n–Ø –Ω–∞–ø–æ–º–Ω—é, –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á—ë—Ç.")
        threading.Timer(1500, lambda: bot.send_message(message.chat.id, "üîî –í—Ä–µ–º—è –≤—ã—à–ª–æ! –°–¥–µ–ª–∞–π 5-–º–∏–Ω—É—Ç–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤.")).start()
    except Exception as e:
        print(f"[ERROR] Pomodoro: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä.")

def handle_motivation(call):
    try:
        text = "üí™ *–ú–æ—Ç–∏–≤–∞—Ü–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("üçÖ Pomodoro-—Ç–∞–π–º–µ—Ä", callback_data="pomodoro"),
            types.InlineKeyboardButton("üèÖ –ê—á–∏–≤–∫–∏", callback_data="achievements"),
            types.InlineKeyboardButton("üí¨ –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è", callback_data="quote"),
        )
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu"))
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        print(f"[ERROR] –≤ handle_motivation: {e}")
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏.")

@bot.callback_query_handler(func=lambda call: True)
def handle_all_callbacks(call):
    try:
        try:
            bot.answer_callback_query(call.id)
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å answer_callback_query: {e}")

        if call.data == "status":
            status(call.message)
        elif call.data == "grades":
            grades(call.message)
        elif call.data == "add_grade":
            add_grade(call.message)
        elif call.data == "set_debts":
            set_debts(call.message)
        elif call.data == "card":
            card(call.message)
        elif call.data == "reminders":
            handle_reminders(call)
        elif call.data == "university":
            university_info(call.message)
        elif call.data.startswith("bld_") or call.data.startswith("uni_"):
            handle_university_buttons(call)
        elif call.data == "menu":
            show_main_menu(call)
        elif call.data == "motivation":
            handle_motivation(call)
        elif call.data == "quote":
            send_quote(call.message)
        elif call.data == "pomodoro":
            start_pomodoro(call.message)
        elif call.data == "quote":
            send_quote(call.message)
        elif call.data == "achievements":
            achievements(call.message)

            
    except Exception as e:
        print(f"[ERROR] –≤ handle_all_callbacks: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.message_handler(commands=['logout'])
def logout(message):
    user_id = str(message.chat.id)
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('UPDATE students SET id = NULL, active = 1 WHERE id = ?', (user_id,))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, "üóë –¢—ã –≤—ã—à–µ–ª. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—à–∏ /start.")

@bot.message_handler(commands=['achievements'])
def achievements(message):
    user_id = str(message.chat.id)
    student = get_student(user_id)
    if not student:
        bot.send_message(message.chat.id, "‚ùó –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    ach_list = get_achievements(user_id)
    if not ach_list:
        send_with_back(message, "üèÖ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü–æ–¥—Ç—è–Ω–∏ –æ—Ü–µ–Ω–∫–∏ ‚Äî –∏ –±—É–¥—É—Ç!", "motivation")
    else:
        text = "üèÖ –¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + "\n".join([f"‚úÖ {a}" for a in ach_list])
        send_with_back(message, text, "motivation")


# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
def check_for_grade_updates():
    while True:
        try:
            students = get_all_students()
            for student in students:
                user_id = student['id']
                if not user_id:
                    continue

                current_grades = student["grades"]
                last_grades = student.get("last_grades", {}) or {}

                if not last_grades:
                    update_last_grades(user_id, current_grades)
                    continue

                updates = []
                for subject, new_score in current_grades.items():
                    old_score = last_grades.get(subject)
                    if old_score is not None and new_score != old_score:
                        updates.append(f"{subject}: –±—ã–ª–æ {old_score} ‚Üí —Å—Ç–∞–ª–æ {new_score}")

                if updates:
                    message = "üì¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:\n" + "\n".join(updates)
                    try:
                        bot.send_message(user_id, message)
                    except Exception as e:
                        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É ID {user_id}: {e}")
                    update_last_grades(user_id, current_grades)

        except Exception as e:
            print(f"[ERROR] –í –ø–æ—Ç–æ–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫: {e}")

        time.sleep(60)

threading.Thread(target=check_for_grade_updates, daemon=True).start()

print("[INFO] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∫–æ–º–∞–Ω–¥—ã")
bot.polling()