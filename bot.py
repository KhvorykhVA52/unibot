import telebot
import math
from telebot import types
from config import TOKEN
from database import *
import sqlite3

init_db()

faculties = {
    "–í–®–¶–¢": {
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏ —Å–µ—Ç–µ–π": ["–ò–ë–ö–°-24-1", "–ò–ë–ö–°-23"],
        "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è": ["–ê–°–û–∏–£–ë-24-1", "–ê–°–û–∏–£–ë-23"]
    },
    "–ù–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤—ã–µ –¥–µ–ª–æ": {
        "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤ –≤ –Ω–µ—Ñ—Ç—è–Ω–æ–π –∏ –≥–∞–∑–æ–≤–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏": ["–ê–¢–ü-21", "–≠–≠-22"],
        "–ù–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤–æ–µ –¥–µ–ª–æ": ["–ù–î–ë-24", "–ù–î–ë-23"]
    }
}

ADMIN_IDS = [
    "1592890429", "1116477607", "6499953001",
    "564380150", "1025247272", "843344460"
]

import threading
import time

bot = telebot.TeleBot(TOKEN)

@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.chat.id)

    if student_exists(user_id):
        bot.send_message(message.chat.id, "‚úÖ –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n–ù–∞–ø–∏—à–∏ /menu —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for fac in faculties.keys():
        markup.add(types.KeyboardButton(fac))

    msg = bot.send_message(message.chat.id, "üèõ –í—ã–±–µ—Ä–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=markup)
    bot.register_next_step_handler(msg, select_faculty)

def select_faculty(message):
    faculty = message.text.strip()
    if faculty not in faculties:
        bot.send_message(message.chat.id, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: /start")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for spec in faculties[faculty].keys():
        markup.add(types.KeyboardButton(spec))

    msg = bot.send_message(message.chat.id, "üìò –í—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:", reply_markup=markup)
    bot.register_next_step_handler(msg, select_specialty, faculty)

def select_specialty(message, faculty):
    specialty = message.text.strip()
    if specialty not in faculties[faculty]:
        bot.send_message(message.chat.id, "‚ùó –ù–µ–≤–µ—Ä–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: /start")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for group in faculties[faculty][specialty]:
        markup.add(types.KeyboardButton(group))

    msg = bot.send_message(message.chat.id, "üßë‚Äçüéì –í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:", reply_markup=markup)
    bot.register_next_step_handler(msg, select_group, faculty, specialty)

def select_group(message, faculty, specialty):
    group_name = message.text.strip()
    if group_name not in faculties[faculty][specialty]:
        bot.send_message(message.chat.id, "‚ùó –ù–µ–≤–µ—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: /start")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã
    student_names = get_students_by_group(faculty, specialty, group_name)
    if not student_names:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –§–ò–û –¥–ª—è –≤—ã–±–æ—Ä–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for name in student_names:
        markup.add(types.KeyboardButton(name))

    msg = bot.send_message(message.chat.id, "üë§ –í—ã–±–µ—Ä–∏ —Å–≤–æ—ë –§–ò–û –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, assign_identity, faculty, specialty, group_name)

def assign_identity(message, faculty, specialty, group_name):
    user_id = str(message.chat.id)
    name = message.text.strip()
    assign_user_id_to_student(user_id, name, faculty, specialty, group_name)

    bot.send_message(message.chat.id, f"""‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!
–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.""")


    commands_text = """
üìå –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:

/menu ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/status ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å
/grades ‚Äî —Å–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫
/add_grade ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É
/set_debts ‚Äî —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–≥–æ–≤
/card ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
/admin ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
"""
    bot.send_message(message.chat.id, commands_text)

@bot.message_handler(commands=['status'])
def status(message):
    user_id = str(message.chat.id)
    student = get_student(user_id)

    if not student:
        bot.send_message(message.chat.id, "‚ùó –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return

    name = student["name"]
    grades = student["grades"]
    debts = student["debts"]
    avg = round(sum(grades.values()) / len(grades), 2) if grades else 0.0
    risk = min(100, debts * 25)
    grades_text = "\n".join([f"{subj}: {score} –±–∞–ª–ª–æ–≤" for subj, score in grades.items()]) or "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"

    text = f"""üë§ {name}
üèõ –§–∞–∫—É–ª—å—Ç–µ—Ç: {student["faculty"]}
üìò –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {student["specialty"]}
üßë‚Äçüéì –ì—Ä—É–ø–ø–∞: {student["group"]}

üìö –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å:
{grades_text}

üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg}
‚ùó –î–æ–ª–≥–∏: {debts}
üî• –†–∏—Å–∫ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è: {risk}%
"""
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['grades'])
def grades(message):
    user_id = str(message.chat.id)
    student = get_student(user_id)

    if not student:
        bot.send_message(message.chat.id, "‚ùó –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    grades = student["grades"]
    if grades:
        grades_text = "\n".join([f"{subj}: {score} –±–∞–ª–ª–æ–≤" for subj, score in grades.items()])
    else:
        grades_text = "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"

    bot.send_message(message.chat.id, f"üìò –¢–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏:\n{grades_text}")

@bot.message_handler(commands=['add_grade'])
def add_grade(message):
    msg = bot.send_message(message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏ –ø—Ä–µ–¥–º–µ—Ç –∏ –±–∞–ª–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n–ù–∞–ø—Ä–∏–º–µ—Ä: –§–∏–∑–∏–∫–∞, 85")
    bot.register_next_step_handler(msg, save_grade)

def save_grade(message):
    try:
        user_id = str(message.chat.id)
        student = get_student(user_id)

        if not student:
            bot.send_message(message.chat.id, "‚ùó –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return

        text = message.text.strip()

        # –ü—Ä–∏–º–µ—Ä: "–§–∏–∑–∏–∫–∞, 78. –ê–ª–≥–µ–±—Ä–∞, 99. –ò—Å—Ç–æ—Ä–∏—è, 85"
        items = text.split(".")
        updates = {}

        for item in items:
            if "," not in item:
                continue
            subject, score = item.split(",", 1)
            subject = subject.strip()
            score = int(score.strip())
            updates[subject] = score

        if not updates:
            raise ValueError("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")

        grades = student["grades"]
        grades.update(updates)
        update_grades(user_id, grades)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        result = "\n".join([f"{subj}: {score} –±–∞–ª–ª–æ–≤" for subj, score in updates.items()])
        bot.send_message(message.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã –æ—Ü–µ–Ω–∫–∏:\n{result}")

    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞! –§–æ—Ä–º–∞—Ç: –§–∏–∑–∏–∫–∞, 78. –ê–ª–≥–µ–±—Ä–∞, 99.")
        print(f"[DEBUG] –û—à–∏–±–∫–∞ –≤ save_grade: {e}")




@bot.message_handler(commands=['set_debts'])
def set_debts(message):
    msg = bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –¥–æ–ª–≥–æ–≤? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ:")
    bot.register_next_step_handler(msg, save_debts)

def save_debts(message):
    try:
        user_id = str(message.chat.id)
        student = get_student(user_id)
        if not student:
            bot.send_message(message.chat.id, "‚ùó –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return

        debts = int(message.text.strip())
        update_debts(user_id, debts)
        bot.send_message(message.chat.id, f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å —É —Ç–µ–±—è {debts} –¥–æ–ª–≥–æ–≤.")
    except:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")

@bot.message_handler(commands=['card'])
def card(message):
    user_id = str(message.chat.id)
    student = get_student(user_id)

    if not student:
        bot.send_message(message.chat.id, "‚ùó –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    name = student["name"]
    grades = student["grades"]
    debts = student["debts"]
    avg = round(sum(grades.values()) / len(grades), 2) if grades else 0.0
    risk = min(100, debts * 25)
    grades_text = "\n".join([f"{subj}: {score} –±–∞–ª–ª–æ–≤" for subj, score in grades.items()]) or "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"

    text = f"""üéì –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞

üë§ –§–ò–û: {name}
üÜî ID: {user_id}

üìö –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å:
{grades_text}

üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg}
‚ùó –î–æ–ª–≥–∏: {debts}
üî• –†–∏—Å–∫ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è: {risk}%
"""
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    user_id = str(message.chat.id)

    if user_id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    report = "üìã –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n"
    students = get_all_students()

    for student in students:
        name = student["name"]
        uid = student["id"]
        grades = student["grades"]
        debts = student["debts"]
        avg = round(sum(grades.values()) / len(grades), 2) if grades else 0.0
        risk = min(100, debts * 25)

        report += f"""üë§ {name}
ID: {uid}
üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg}
‚ùó –î–æ–ª–≥–∏: {debts} | üî• –†–∏—Å–∫: {risk}%\n\n"""

    bot.send_message(message.chat.id, report)

@bot.message_handler(commands=['menu'])
def menu(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üìä –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å", callback_data="status"),
        types.InlineKeyboardButton("üìò –û—Ü–µ–Ω–∫–∏", callback_data="grades"),
        types.InlineKeyboardButton("‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_grade"),
        types.InlineKeyboardButton("‚ùó –î–æ–ª–≥–∏", callback_data="set_debts"),
        types.InlineKeyboardButton("üìÑ –ö–∞—Ä—Ç–æ—á–∫–∞", callback_data="card")
    )
    bot.send_message(message.chat.id, "üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_inline_buttons(call):
    if call.data == "status":
        status(call.message)
    elif call.data == "grades":
        grades(call.message)
    elif call.data == "add_grade":
        add_grade(call.message)
    elif call.data == "set_debts":
        set_debts(call.message)
    elif call.data == "card":
        card(call.message)

def check_for_grade_updates():
    while True:
        try:
            students = get_all_students()
            for student in students:
                user_id = student['id']
                if not user_id:
                    continue

                current_grades = student["grades"]
                last_grades = student.get("last_grades", {}) or {}

                if not last_grades:
                    update_last_grades(user_id, current_grades)
                    continue

                updates = []
                for subject, new_score in current_grades.items():
                    old_score = last_grades.get(subject)
                    if old_score is not None and new_score != old_score:
                        updates.append(f"{subject}: –±—ã–ª–æ {old_score} ‚Üí —Å—Ç–∞–ª–æ {new_score}")

                print(f"[DEBUG] {student['name']} ‚Äî —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫–∏:")
                print(f"grades      : {current_grades}")
                print(f"last_grades : {last_grades}")

                if updates:
                    message = "üì¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:\n" + "\n".join(updates)
                    try:
                        bot.send_message(user_id, message)
                        print(f"[OK] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É ID {user_id}.")
                    except Exception as e:
                        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É ID {user_id}: {e}")
                    update_last_grades(user_id, current_grades)

        except Exception as e:
            print(f"[ERROR] –í –ø–æ—Ç–æ–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫: {e}")

        time.sleep(60)

threading.Thread(target=check_for_grade_updates, daemon=True).start()

@bot.message_handler(commands=['status'])
def status(message):
    user_id = str(message.chat.id)
    print(f"[DEBUG] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /status: user_id = {user_id}")

    student = get_student(user_id)
    if not student:
        bot.send_message(message.chat.id, "‚ùó –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return

    name = student["name"]
    grades = student["grades"]
    debts = student["debts"]
    avg = round(sum(grades.values()) / len(grades), 2) if grades else 0.0
    risk = min(100, debts * 25)
    grades_text = "\n".join([f"{subj}: {score} –±–∞–ª–ª–æ–≤" for subj, score in grades.items()]) or "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"

    # –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ü–µ–Ω–∫–∏
    if avg >= 90:
        prediction = "–û—Ç–ª–∏—á–Ω–æ (5)"
    elif avg >= 75:
        prediction = "–•–æ—Ä–æ—à–æ (4)"
    elif avg >= 60:
        prediction = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ (3)"
    else:
        prediction = "–ù–µ—É–¥ (2) ‚Äî —Ä–∏—Å–∫ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è –≤—ã—Å–æ–∫"

    # –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    critical_subjects = [f"‚ùó {subj}: {score} –±–∞–ª–ª–æ–≤" for subj, score in grades.items() if score < 60]
    critical_text = "\n".join(critical_subjects) or "–ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"

    # –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (—Ü–µ–ª—å ‚Äî 85 –±–∞–ª–ª–æ–≤)
    goal = 85
    filled = math.floor(avg / goal * 5)
    bar = "‚ñ∞" * filled + "‚ñ±" * (5 - filled)
    progress_line = f"üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏: {bar} {avg} / {goal}"

    text = f"""üë§ {name}
üèõ –§–∞–∫—É–ª—å—Ç–µ—Ç: {student["faculty"]}
üìò –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {student["specialty"]}
üßë‚Äçüéì –ì—Ä—É–ø–ø–∞: {student["group"]}

üìä –ú–æ—è –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å
   ‚îú‚îÄ –¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã
{grades_text}
   ‚îú‚îÄ –ü—Ä–æ–≥–Ω–æ–∑ –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏: {prediction}
   ‚îú‚îÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã:
{critical_text}
   ‚îî‚îÄ {progress_line}

üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg}
‚ùó –î–æ–ª–≥–∏: {debts}
üî• –†–∏—Å–∫ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è: {risk}%
"""
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['achievements'])
def achievements(message):
    user_id = str(message.chat.id)
    student = get_student(user_id)
    if not student:
        bot.send_message(message.chat.id, "‚ùó –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return

    achievements_list = get_achievements(user_id)
    if not achievements_list:
        bot.send_message(message.chat.id, "üèÖ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ó–∞—Ä–∞–±–æ—Ç–∞–π –∏—Ö, –ø–æ–≤—ã—à–∞—è —Å–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏!")
    else:
        text = "üèÖ –¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + "\n".join([f"‚úÖ {a}" for a in achievements_list])
        bot.send_message(message.chat.id, text)

print("[INFO] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∫–æ–º–∞–Ω–¥—ã")
bot.polling()
